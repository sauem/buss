<?php


namespace backend\controllers;


use backend\models\Banners;
use backend\models\BannersSearch;
use backend\models\ContactsAssignment;
use backend\models\Media;
use backend\models\Products;
use backend\models\ProductsSearch;
use backend\models\StatisticReport;
use backend\models\UploadForm;
use common\helper\Helper;
use Illuminate\Support\Arr;
use yii\base\Exception;
use yii\helpers\ArrayHelper;
use yii\web\BadRequestHttpException;
use yii\web\NotFoundHttpException;
use yii\web\Response;

class AjaxController extends BaseController
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        \Yii::$app->response->format = Response::FORMAT_JSON;
    }

    public function behaviors()
    {
        return array_merge(parent::behaviors(), [
            'corsFilter' => [
                'class' => \yii\filters\Cors::className(),
                'cors' => [
                    'Origin' => ['https://www.businessstyle.vn','http://www.businessstyle.vn'],
                    'Access-Control-Request-Method' => ['POST', 'PUT','GET','OPTIONS'],
                    'Access-Control-Request-Headers' => ['X-Wsse'],
                    'Access-Control-Allow-Credentials' => true,
                    'Access-Control-Max-Age' => 3600,
                    'Access-Control-Expose-Headers' => ['X-Pagination-Current-Page'],
                ]
            ]
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * @return \backend\models\Media|bool
     * @throws BadRequestHttpException
     */
    function actionUploadFile()
    {
        $model = new UploadForm();
        if (\Yii::$app->request->isPost) {

            try {
                $model->load(\Yii::$app->request->post(), "");
                return $model->upload();
            } catch (Exception $e) {
                throw new BadRequestHttpException($e->getMessage());
            }
        }
        throw new BadRequestHttpException("Post only");
    }

    /**
     * @return bool
     * @throws NotFoundHttpException
     */
    function actionRemoveFile()
    {
        $model = Media::findOne(['url' => \Yii::$app->request->post('url')]);
        try {
            if (!$model) {
                throw new NotFoundHttpException('Không tìm thấy ảnh!');
            }
            if (file_exists(UPLOAD_PATH . str_replace('static/', '', $model->url))) {
                unlink(UPLOAD_PATH . str_replace('static/', '', $model->url));
                $model->delete();
            }
        } catch (\Exception $exception) {
            throw new NotFoundHttpException($exception->getMessage());
        }
        return true;
    }

    /**
     * @return array
     */
    function actionGetBanner()
    {
        $searchModel = new BannersSearch();
        $dataProvider = $searchModel->search([
            'BannersSearch' => array_merge([
                'active' => Banners::STATUS_ACTIVE,
            ], \Yii::$app->request->queryParams)
        ]);
        $result = $dataProvider->query->asArray()->all();
        return $result;
    }

    /**
     * @throws BadRequestHttpException
     */

    function actionCounter()
    {
        $bannerId = \Yii::$app->request->post('bannerKey'); // banner key
        $page = \Yii::$app->request->post('page'); // page shown
        $type = \Yii::$app->request->post('type'); //click or show

        $banner = Banners::findOne($bannerId);
        if (!$banner) {
            throw new BadRequestHttpException('Không tìm thấy link!');
        }
        try {
            $model = StatisticReport::findOne(['banner_id' => $bannerId]);
            if (!$model) {
                $model = new StatisticReport();
            }
            $model->banner_id = $bannerId;
            switch ($type) {
                case StatisticReport::TYPE_CLICK:
                    $model->click += $model->click;
                    break;
                case StatisticReport::TYPE_SHOWN:
                    $model->shown += $model->shown;
                    break;
            }
            $model->ip = Yii::$app->getRequest()->getUserIP();
            if (!$model->save()) {
                throw new BadRequestHttpException(Helper::firstError($model));
            }
        } catch (\Exception $exception) {
            throw new BadRequestHttpException($exception->getMessage());
        }
        return [
            'success' => 1,
            'redirect' => $banner->href
        ];
    }
}